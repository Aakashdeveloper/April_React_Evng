https://code.visualstudio.com/download
https://nodejs.org/en/
https://github.com/Aakashdeveloper
https://github.com/

Basic JavaScript
Npm
React = 3
Mock API
json-server
//////////////////////
React-JWT(Login Logout)-2
React-GraphQL-1
Depolyment
-> MERN
-> Docker
-> heroku
-> Nginx
Github
React_hooks -1
React-Redux =1
React-Redux =1
Basic React Native=1
Testing Jest Enzime
React-Saga -1
React-with-typescript-1
--------NOT Backend--------------
API
GraphQL
Login/Logout

//////////////////
React
/////////
A JavaScript lib for building user interfaces

frontend lib/framework which help to building single page application 
using component base structure

virtual dom


/////////////////////
Open source
Npm > node package manager

JSON > JavaScript Object Notation 
[
    {
        name: 'Aakash',
        class: 'UI'
    },
    {
        name: 'Bhumika',
        class: 'React'
    }
]

package.json
> starting point to the app 
> meta > description, version , author
> Scripts > start, build , test 
> Package > npm packages

//////////////////////
Step to generate package.json
////////////////
**NodeJs must be install in system
> go inside folder
> type "npm init"
> Answer all question
> type "yes"


//////////////////////
Step to install package
////////////////
> go inside the folder using cmd
> type npm i react


//////////////////////
Step to generate react app
////////////////
#window
$$$ One time in new laptop $$$$
> open the cmd as admin
> type 'npm i -g create-react-app'

$$$ Every time you need application $$$$
> go inside the folder using cmd
> type create-react-app appname

//////////////////////
Step to start react app
////////////////////
> go inside the folder using cmd
> npm start 
> localhost:3000


//es5
function add(a,b){
    return a+b
}

add(1,2)
3

//es6
const add = (a,b) => { return a+b }


function test(a,b){
    var out = [a,b]
    return out
}

test(1,2)
2
test(4,3)
3

///component////
> functional
    > Dumb component
    > We use for the display purpose
    > it cannot maintain state

> class Component
    > Logical Component
    > We call api and app logic in class
    > it can maintain state
> Hooks


state
> local variable
> any data interaction will happen through state
> we can update value of state

props
> Use to transport state
> we cannot change value of props
> it can only transfer data btw nested component


var a = [2,4,6,7,3,9]
a.map((data) => { return data*2})
(6) [4, 8, 12, 14, 6, 18]
a.filter((data)=> {return data>5})
(3) [6, 7, 9]

//es5
var age = 10
var out = "my age is "+age 
"my age is 10"

//es6
var age = 10
var out = `my age is ${age}`
"my age is 10"

var a = [2,4,6,7,3,9]
a.map((data) => { return `<a>${data*2}<a/>`})
(6) ["<a>4<a/>", "<a>8<a/>", "<a>12<a/>", "<a>14<a/>", "<a>6<a/>", "<a>18<a/>"]

var a = ["Delhi","Mumbai","Pune","Amsterdam","London"]
undefined
a.indexOf('Delhi')
0
a.indexOf('London')
4
a.indexOf('Hongkong')
-1
a.indexOf('Dubai')
-1



function add(xxxxx,yyyy){
    return xxxxx+yyyy
}

add(1,2)

parent=>child (props)
child=>parent(props with function)


npm i react-router-dom

history > for redirection
location > for query params
match > for params


(get) hotels>         https://developerfunnel.herokuapp.com/hotels
(get) hotelwrtcity >  https://developerfunnel.herokuapp.com/hotels?city=6
(get) hoteldetails >  https://developerfunnel.herokuapp.com/hotelsdetails/1
(get) onbasisoftrip > https://developerfunnel.herokuapp.com/hotellist/1

(get) roomfilter >    https://developerfunnel.herokuapp.com/hotellist/4?roomtype=1

(get) costfilter >    https://developerfunnel.herokuapp.com/hotellist/1?hcost=1000&lcost=500
(get) cityname >      https://developerfunnel.herokuapp.com/location
(get) rooms >         https://developerfunnel.herokuapp.com/rooms
(get) triptype>       https://developerfunnel.herokuapp.com/booking
(get) bookingdetails> https://developerfunnel.herokuapp.com/allBooking
(post)placebooking >  https://developerfunnel.herokuapp.com/placeBook


npm i react-router-dom axios react-tabs

npm run build

///////////////////////
npm i -g json-server
json-server --watch db.json --port 8900


/////////////
/******GetAllUser*****/
(GET)> http://localhost:5000/api/auth/users

/******Register*****/
(POST)> http://localhost:5000/api/auth/register
(body) => {"name":"Aakash", "email":"aa@gmail.com","password":"12345678","role?":"user"}


/******Login*****/
(POST) => http://localhost:5000/api/auth/login
(body)  => {"email":"aa@gmail.com","password":"12345678"}
(response)=> {auth:true,token:'dgsdg'}

/******UserInfo*****/
(GET) => http://localhost:5000/api/auth/userinfo
(Header) => {'x-access-token':'token value from login'}